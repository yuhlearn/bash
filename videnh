#! /bin/bash

set -o errexit -o pipefail -o noclobber -o nounset

! getopt --test > /dev/null 
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo 'Iâ€™m sorry, `getopt --test` failed in this environment.'
    exit 1
fi

LONGOPTS=chunksize,fps:,model:,insize:,lighten:,size:,quality:,rife,tta,help
OPTIONS=c:f:m:p:l:s:q:rxh

! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    exit 2
fi

eval set -- "$PARSED"

SLEEP=3 # Rest a few seconds between operations or bad things can happen
FPS=50
MODEL=RealESRGAN_General_WDN_x4_v3
CHUNK=00:10
RESOLUTION=x1080
LIGHTEN=n
QUALITY=10
RIFE=n
TTA=
HELP=$(cat <<-END
Usage: videnh [OPTIONS] FILE

Options:
  -c --chunksize  Length of the chunks to be processed individually MM:SS 
                  Default: 00:10
  -f --fps        Number of frames per second in the output video
                  Default: 50
  -m --model      ESRGAN model: realesrgan-x4plus, RealESRGAN_General_x4_v3 ... 
                  Default: RealESRGAN_General_WDN_x4_v3
  -l --lighten    Opacity of the lighten layer in percent, e.g.: 75% 
                  Default: n
  -s --size       Resolution of the output image: [W]x[H][!] or n (no resize)
                  Default: x1080
  -q --quality    Quality of the H.264 output video: CRF 0-51
                  Default: 10
  -r --rife       Apply RIFE interpolation in order to double the frame rate.
  -x --tta        Enable tta mode
  -h --help
END

)

progress_bar () {
	local CURRENT=$1
	local END=$2
	local RS='\033[0m'
	local BG='\033[7m'
	local ER='\e[1A\e[K'
	
	read -r WIDTH < <(tput cols)
	local DIFFERENCE=$((END-CURRENT))
	local PERCENT=$((CURRENT*100/END))
	local LENGTH=$((CURRENT*WIDTH/END))
	local TEXT="$PERCENT% $CURRENT:$DIFFERENCE$3"
	local PADDING=$((LENGTH-${#TEXT}))
	local LINE="$TEXT$(printf "%0.s " $(seq 1 "$PADDING"))"

	echo -e "$ER$BG${LINE:0:LENGTH}$RS${LINE:LENGTH}$RS"
}

esrgan_progress () {
	local FRAME=0
	local FRAMECOUNT=$(ls -1 ./frames/ | wc -l)
	local START=$SECONDS
	echo
	while IFS= read -r l; do 
		if [ "$l" == "0.00%" ]; then 
			FRAME=$((FRAME+1))
			ETA=$((((SECONDS-START)*1000/FRAME)*(FRAMECOUNT-FRAME)/1000))
			progress_bar $FRAME $FRAMECOUNT "=${ETA}s ESRGAN"
		fi; 
	done
}

rife_progress () {
	local FRAME=-13
	local FRAMECOUNT=$(ls -1 ./esrgan/ | wc -l)
	local START=$SECONDS
	FRAMECOUNT=$((FRAMECOUNT*2))
	echo
	while IFS= read -r l; do 
		FRAME=$((FRAME+1))
		ETA=0
		if [ $FRAME -gt 0 ]; then 
			ETA=$((((SECONDS-START)*1000/FRAME)*(FRAMECOUNT-FRAME)/1000))
		fi
		progress_bar $FRAME $FRAMECOUNT "=${ETA}s RIFE"
	done
}

im_lighten () {
	local FILE=$2
	local LIGHTEN=$1
	convert \
		./frames/$FILE \
		-filter Lanczos \
		-resize 400% \
		-channel A \
		-evaluate set $LIGHTEN \
		+channel \
		./esrgan/$FILE \
		+swap \
		-compose Lighten \
		-composite \
		./esrgan/$FILE
}
export -f im_lighten

while true; do
    case "$1" in
        -c|--chunksize)
            CHUNK=$2
            shift 2
            ;;
        -f|--fps)
            FPS=$2
            shift 2
            ;;
        -m|--model)
            MODEL=$2
            shift 2
            ;;
        -l|--lighten)
            LIGHTEN=$2
            shift 2
            ;;
        -s|--size)
            RESOLUTION=$2
            shift 2
            ;;
        -q|--quality)
            QUALITY=$2
            shift 2
            ;;
        -r|--rife)
            RIFE=y
            shift 1
            ;;
        -x|--tta)
            TTA=-x
            shift 1
            ;;
        -h|--help)
			echo "$HELP"
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 3
            ;;
    esac
done

if [[ $# -ne 1 ]]; then
    echo "$0: A single input file is required."
    exit 4
fi

TMP="temp_$(tr -dc A-Za-z0-9 </dev/urandom | head -c 20 ; echo '')"
INFILE=$(basename ${1%.*})

if [ -f $1 ]; then
    mkdir \
    	$TMP \
    	$TMP/out \
    	$TMP/out/parts \
    	$TMP/parts \
    	$TMP/frames \
    	$TMP/esrgan \
    	$TMP/rife
    
    echo $INFILE >> $TMP/filename.txt
    
    ffmpeg \
    	-i $1 \
    	-threads 3 \
    	-vcodec copy \
    	-f segment \
    	-segment_time $CHUNK \
    	-reset_timestamps 1 \
    	$TMP/parts/src%06d.mkv &> /dev/null
    	
elif [ -d $1 ]; then
    TMP=$1
    if [ ! -d "$TMP/frames" ]; 
    	then echo "Error: Missing $TMP/frames"; exit 1; fi
    if [ ! -d "$TMP/esrgan" ]; 
    	then echo "Error: Missing $TMP/esrgan"; exit 1; fi
    if [ ! -d "$TMP/rife"   ]; 
    	then echo "Error: Missing $TMP/rife";   exit 1; fi 
    if [ ! -d "$TMP/parts"  ]; 
    	then echo "Error: Missing $TMP/parts";  exit 1; fi
    rm -f \
    	$TMP/frames/* \
    	$TMP/esrgan/* \
    	$TMP/rife/*
    if [ ! -f "$TMP/filename.txt" ]; 
    	then echo "Error: Missing $TMP/filename.txt"; exit 1; fi
    	
    INFILE="$(<$TMP/filename.txt)"
else
    echo "Error: Argument neither file or directory."
    exit 1  
fi

cd $TMP
printf "Number of parts: " && ls parts/ | wc -l

for PART in parts/*.mkv; do
    echo "$PART"

    if [ -f "out/$PART" ]; then
    	# The video has already been processed
        continue
    fi

	# Extract the frames from the video source
    ffmpeg \
    	-v warning \
    	-hide_banner \
    	-stats \
    	-i $PART \
    	frames/%08d.png &> /dev/null
    
    # Process the frames with ESRGAN
	realesrgan -i ./frames -o ./esrgan/ $TTA -j 1:1:2 -n "$MODEL" 2>&1 | esrgan_progress
    sleep $SLEEP

	if [ $LIGHTEN != n ]; then
		# Overlay the ESRGAN processed frames with the original frame in lighten mode
		parallel --bar im_lighten $LIGHTEN ::: \
			$(find ./frames/ -type f -printf "%f\n")
		sleep $SLEEP
	fi

	if [ $RESOLUTION != n ]; then
		# Resize the processed frames to the the desired output resolution
		parallel --bar mogrify -resize $RESOLUTION ./esrgan/{1} ::: \
			$(find ./frames/ -type f -printf "%f\n")
		sleep $SLEEP
	fi
    
    if [ $RIFE != n ]; then
		# Apply RIFE interpolation to the processed images, doubling the frame rate
		rife -i ./esrgan/ -o ./rife/ -v -j 1:1:2 -m rife-v4 -u 2>&1 | rife_progress
		sleep $SLEEP
	else
		# Skip the interpolation step and just move the frames into the RIFE folder
		mv ./esrgan/* ./rife/
    fi

	# Merge the frames into a video
    ffmpeg \
    	-v warning \
    	-hide_banner \
    	-stats \
    	-r $FPS \
    	-f image2 \
    	-i ./rife/%08d.png \
    	-vcodec libx264 \
    	-crf $QUALITY \
    	-pix_fmt yuv420p \
    	./out/$PART &> /dev/null

    rm -f \
    	frames/* \
    	esrgan/* \
    	rife/* 
done

for FILE in out/parts/*.mkv; do 
    echo "file '$FILE'" >> list.txt
done

ffmpeg \
	-f concat \
	-safe 0 \
	-i list.txt \
	-c copy \
	out/out.mkv &> /dev/null && mv out/out.mkv ../$INFILE.enh.mkv && rm -r ../$TMP

